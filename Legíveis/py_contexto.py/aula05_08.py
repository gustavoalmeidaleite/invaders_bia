# -*- coding: utf-8 -*-
"""Aula05-08.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d63hi37W5tSR-z0wZ73iqh37mVwqnC4h
"""

class Estudante:

  #Exemplo de "Construtor" - pseudo construtor :)
  def __init__(self, nome, matricula):
    self.nome = nome
    self.matricula = matricula

#
e1 = Estudante('Pepa', 202512345)
e2 = Estudante('Cebolinha', 202512346)
print('Nome: ', e1.nome, ', Matrícula: ', e1.matricula)
print('\nNome: ', e2.nome, ', Matrícula: ', e2.matricula)

turma = 'POO_BIA'
class Turma:
    turma = None
    def __init__(self, turma):
        self.turma = turma

tA = Turma('A')
print("Variável de instância: ", tA.turma)
print("Variável global: ", turma)

turma = 'POO_BIA'
class Turma:
    turma = 'Turma UFG'
    def __init__(self, turma): #Método "construtor"
        self.turma = turma

tA = Turma('Turma5 BIA')
tB = Turma('Turma4 BIA')
print(Turma.turma)    #Variável de Classe
Turma.turma = 'Turma UFGG'
print(Turma.turma)    #Variável de Classe
print(tA.turma)       #Variável de Instância
print(tB.turma)       #Variável de Instância
print(turma)          #Variável Global

class Ponto:

    tipo = 'unidade'

    def __init__(self, x, y):  #Método "construtor"
        self.x = x  #self.x indica o atributo x da instância
        self.y = y  #self.y indica o atributo y da instância

    def calculaDistancia(self, p):
        x1 = p.x    #escopo local
        y1 = p.y    #escopo local
        return ((self.x - x1)**2 + (self.y - y1)**2) ** 0.5
#FIM DA CLASSE

p1 = Ponto(9,9)
p2 = Ponto(7,7)

print (p1.calculaDistancia(p2) )
# print (p1.x1)   #Variável de Escopo Local
# print (p1.x)    #Variável de Instância


p1 = Ponto(4,4)
p2 = Ponto(2,2)
print ('Objeto p1= x:', p1.x, ', y:', p1.y, 'tipo:', p1.tipo)
print ('Objeto p2= x:', p2.x, ', y:', p2.y, 'tipo:', p2.tipo)
p1.tipo = 'UnidadeP1'
p2.tipo = 'UnidadeP2'
print ('Após mudar \'tipo\' pela classe Ponto!')
print ('Objeto p1= x:', p1.x, ', y:', p1.y, 'tipo:', p1.tipo,',Classe:', Ponto.tipo)
print ('Objeto p2= x:', p2.x, ', y:', p2.y, 'tipo:', p2.tipo,',Classe:', Ponto.tipo)

class Animal:
    def __init__(self, nome, reproducao, sexo):
        self.nome = nome
        self.reproducao = reproducao
        self.sexo = sexo

class Mamifero(Animal): # (Animal) - indica que Mamifero estende Animal
    def __init__(self, nome, reproducao, numMamas, espessuraDiafragma, sexo):
        super().__init__(nome, reproducao, sexo)
        self.numMamas = numMamas
        self.espessuraDiafragma = espessuraDiafragma
# FIM DA CLASSE

m1 = Mamifero('Gato', 'Vivíparo', 8, 1, 'masculino')
print ('Nome:', m1.nome, ', Reprodução:',m1.reproducao,', Número de Mamas:',m1.numMamas,', Espessura do Diafrágma:', m1.espessuraDiafragma,', Sexo:', m1.sexo)
m2 = Mamifero('Gata', 'Vivíparo', 8, 1, 'feminino')
print ('Nome:', m2.nome, ', Reprodução:',m2.reproducao,', Número de Mamas:',m2.numMamas,', Espessura do Diafrágma:', m2.espessuraDiafragma,', Sexo:', m2.sexo)

from abc import ABC, abstractmethod

class Veiculo(ABC):  #CLASSE ABSTRATA
# Para que seja uma INTERFACE, SÓ PODE HAVER MÉTODOS ABSTRATOS
# @ abstractmethod - diz que o método é abstrato e precisa ser implementado por quem extender a classe
    velocidade = 0

    @abstractmethod
    def getVelocidade(self):        #Método Abstrato
        pass

    @abstractmethod
    def setVelocidade(self, vel):   #Método Abstrato
        pass

    def descricao(self):            #Método Concreto
      print(self.velocidade)