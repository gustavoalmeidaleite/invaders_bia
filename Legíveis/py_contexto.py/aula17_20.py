# -*- coding: utf-8 -*-
"""Aula17-20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YXlJNSZBe_hConCyPaH4t41gxwg_ESzl

# **Exemplo de Delegação entre Classes**
"""

#Exemplo de classe que faz as operações
class Calculadora:

  #  def __init__(self):
  #     pass

   def soma(self, a, b):
     return a + b

   def subtrai(self, a, b):
      return a - b

   def multiplica(self, a, b):
      return a * b

   def divide(self, a, b):
       return a / b

#Exemplo de classe que faz delegação
class Calc:

   def __init__(self):
       self.__c = Calculadora()

   @property     #definição da propriedade __c
   def c(self):
     return self.__c

   @c.setter     #restringe modificação da propriedade __c pelo método
   def c(self, c):
     self.__c = c

   def soma(self, a, b):
       return self.__c.soma(a, b)

   def subtrai(self, a, b):
       return self.__c.subtrai(a, b)

   def multiplica(self, a, b):
       return self.__c.multiplica(a, b)

   def divide(self, a, b):
       return self.__c.divide(a, b)

# Exemplo de uso da calsse Calcula, que delega as ações à classe Calculadora

c = Calc()
print(c.divide(c.soma(c.multiplica(7,3), c.multiplica(8,4)),7))
#print((7*3 + 8*4) / 7) # Média ponderada.

"""# **Exemplo de Herança entre Classes**"""

from abc import ABC, abstractmethod

class Veiculo:
  def __init__(self, nome: str = 'bicicleta', velocidade: int = 0, **kwargs):
    super().__init__(**kwargs)
    self.__nome = nome
    self.__velocidade = velocidade

  @property       #getter Refere-se à Propriedade __nome
  def nome(self):
    return self.__nome

  @nome.setter    #setter Refere-se à Propriedade __nome
  def nome(self, nome):
    self.__nome = nome

  @property       #getter Refere-se à Propriedade __velocidade
  def velocidade(self):
    return self.__velocidade

  @velocidade.setter    #setter Refere-se à Propriedade __velocidade
  def velocidade(self, velocidade):
    self.__velocidade = velocidade

  def __str__ (self):
        return f' [{self.nome}, {self.velocidade}]'

#Veículo Motorizado estende a classe Veículo
class VeiculoMotorizado(Veiculo, ABC):
  def __init__(self, nome, velocidade: int = 0, potencia: int = 0, **kwargs):
    super().__init__(nome=nome, velocidade=velocidade, **kwargs)
    self.__potencia = potencia

  @property       #getter Refere-se à Propriedade __potencia
  def potencia(self):
    return self.__potencia

  @potencia.setter    #setter Refere-se à Propriedade __potencia
  def potencia(self, potencia):
    self.__potencia = potencia

  @abstractmethod
  def virar(self, lado, grau):
    pass

  def __str__ (self):
    return f' [{self.nome}, {self.velocidade}, {self.potencia}] '

#VeículoTerrestre estende a classe VeículoMotorizado
class VeiculoTerrestre(VeiculoMotorizado):
  def __init__(self, nome, velocidade, potencia, cilindradas=None, **kwargs):
    super().__init__(nome=nome, velocidade=velocidade, potencia=potencia, **kwargs)
    self.__cilindradas = cilindradas

  @property       #getter Refere-se à Propriedade __cilindradas
  def cilindradas(self):
    return self.__cilindradas

  @cilindradas.setter    #setter Refere-se à Propriedade __cilindradas
  def cilindradas(self, cilindradas):
    self.__cilindradas = cilindradas

  def virar(self, lado, grau):
    print('Virar o volante para a', lado, 'até atingir', grau, 'graus.')

  def __str__ (self):
    return f' [{self.nome}, {self.velocidade}, {self.potencia}, {self.cilindradas}] '

#Instanciando a classe VeiculoTerrestre

vt = VeiculoTerrestre('Bugatti Chiron', 440, 1600, 8.0)
vt.virar('direita', 90)
print(vt)

#VeículoAereo estende a classe VeículoMotorizado
class VeiculoAereo(VeiculoMotorizado):
  def __init__(self, nome, velocidade, potencia, tetoOperacional=None, **kwargs):
    super().__init__(nome=nome, velocidade=velocidade, potencia=potencia, **kwargs)
    self.__tetoOperacional = tetoOperacional

  @property       #getter Refere-se à Propriedade __tetoOperacional
  def tetoOperacional(self):
    return self.__tetoOperacional

  @tetoOperacional.setter    #setter Refere-se à Propriedade __tetoOperacional
  def tetoOperacional(self, tetoOperacional):
    self.__tetoOperacional = tetoOperacional

  def virar(self, lado, grau):
    if(lado == 'direita'):
      print('Virar o leme para a direita, aileron direito para cima e esquerdo para baixo até atingir', grau, 'graus.')
    elif (lado == 'esquerda'):
      print('Virar o leme para a esquerda, aileron direito para baixo e esquerdo para cima até atingir', grau, 'graus.')

  def __str__ (self):
    return f' [{self.nome}, {self.velocidade}, {self.potencia}, {self.tetoOperacional}] '

#Instanciando a classe VeiculoAereo
va = VeiculoAereo('Gripen NG', 2450, 22000, 16000)
va.virar('direita', 90)
print(va)

#VeículoHibrido estende a classe VeículoTerrestre e VeiculoMotorizado
class VeiculoHibrido(VeiculoTerrestre, VeiculoAereo):
  def __init__(self, nome, velocidade, potencia, cilindradas=None, tetoOperacional=None, modo=0, **kwargs):
    super().__init__(nome=nome, velocidade=velocidade, potencia=potencia, cilindradas=cilindradas,
                     tetoOperacional=tetoOperacional, **kwargs)

    # VeiculoAereo.__init__(nome=nome, velocidade=velocidade, potencia=potencia,
    #                  tetoOperacional=tetoOperacional, **kwargs)
    # VeiculoTerrestre.__init__(nome=nome, velocidade=velocidade, potencia=potencia, cilindradas=cilindradas, **kwargs)
    self.__modo = modo

  @property       #getter Refere-se à Propriedade __modo
  def modo(self):
    return self.__modo

  @modo.setter    #setter Refere-se à Propriedade __modo
  def modo(self, modo):
    self.__modo = modo

  def liga(self, a, b, c): ###Python não aceita sobrecarga
    print('Metodo recebendo 3 parâmetros')

  # def liga(self, a, b): ###Python não aceita sobrecarga
  #   print('Metodo recebendo 2 parâmetros')

  def __str__ (self):
    return f' [{self.nome}, {self.velocidade}, {self.potencia}, {self.cilindradas}, {self.modo}] '

#Instanciando a classe VeículoHibrido

#vh = VeiculoHibrido('ABX20', 0, 240, 2.0, 5000, 'terrestre')
vh = VeiculoHibrido("Carro Voador", 0, 300, cilindradas=2000, tetoOperacional=5000, modo=2)
print(vh)
vh.liga(1, 2, 4)
vh.virar('direita', 45)

# "Sobrecarga" e Sobreescrita de métodos:

class Relatorio:

  def rel1(self, var1): #No Python assinatura é somente o nome do método
    print('Relatorio 1: ' + var1) #Portanto, NÃO HÁ sobrecarga de metodo em PYTHON

  def rel1(self, var1, var2): #Em Python, o último método que é considerado
    print('Relatorio 1: ' + var1+ ' ' + var2)


class RelatorioSemanal(Relatorio):

  #No Python o método da classe filha sobrescreve o método com mesma
  #assinatura na classe mãe.
  def rel1(self, var1, var2):
    print('Relatorio 1: ' + var2+ ' ' + var1)


r1 = RelatorioSemanal()
r1.rel1('Nome', 'Sobrenome')